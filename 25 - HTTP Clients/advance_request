## üåê `http.Client` - C·∫•u h√¨nh & s·ª≠ d·ª•ng n√¢ng cao trong Go

```go
client := &http.Client{ ... }
```

---

### üîß C√°c tr∆∞·ªùng c·∫•u h√¨nh ch√≠nh:

| Tr∆∞·ªùng          | M√¥ t·∫£                                                                                                                   |
| --------------- | ----------------------------------------------------------------------------------------------------------------------- |
| `Transport`     | D√πng ƒë·ªÉ c·∫•u h√¨nh c√°ch request ƒë∆∞·ª£c g·ª≠i (timeout, proxy, keep-alive...). N·∫øu kh√¥ng set th√¨ d√πng `http.DefaultTransport`. |
| `CheckRedirect` | H√†m x·ª≠ l√Ω khi c√≥ chuy·ªÉn h∆∞·ªõng (HTTP 3xx). C√≥ th·ªÉ d√πng ƒë·ªÉ gi·ªõi h·∫°n s·ªë l·∫ßn redirect ho·∫∑c ngƒÉn redirect.                   |
| `Jar`           | Qu·∫£n l√Ω cookie cho client (c·∫ßn implement interface `CookieJar`).                                                        |
| `Timeout`       | Timeout cho to√†n b·ªô request (bao g·ªìm DNS, k·∫øt n·ªëi, ƒë·ªçc d·ªØ li·ªáu...), ki·ªÉu `time.Duration`.                               |

---

### üîÅ Ph∆∞∆°ng th·ª©c:

| Ph∆∞∆°ng th·ª©c                    | M√¥ t·∫£                                                               |
| ------------------------------ | ------------------------------------------------------------------- |
| `Do(req *http.Request)`        | G·ª≠i m·ªôt request ƒë·∫ßy ƒë·ªß (GET, POST...) ƒë∆∞·ª£c x√¢y d·ª±ng th·ªß c√¥ng.       |
| `CloseIdleConnections()`       | ƒê√≥ng t·∫•t c·∫£ c√°c k·∫ø n·ªëi ƒëang idle (gi·∫£i ph√≥ng t√†i nguy√™n).           |
| `Get(url)`                     | G·ª≠i GET request.                                                    |
| `Head(url)`                    | G·ª≠i HEAD request.                                                   |
| `Post(url, contentType, body)` | G·ª≠i POST request v·ªõi body tu√Ω ch·ªânh.                                |
| `PostForm(url, data)`          | G·ª≠i POST request v·ªõi form d·∫°ng `application/x-www-form-urlencoded`. |

---

### ‚úÖ V√≠ d·ª• ƒë∆°n gi·∫£n:

```go
package main

import (
    "fmt"
    "net/http"
    "time"
)

func main() {
    client := &http.Client{
        Timeout: time.Second * 5,
    }

    resp, err := client.Get("https://example.com")
    if err != nil {
        fmt.Println("Request failed:", err)
        return
    }
    defer resp.Body.Close()
    fmt.Println("Status code:", resp.StatusCode)
}
```

---

### üìù Ghi nh·ªõ:

- D√πng `client.Do(req)` khi c·∫ßn g·ª≠i request t√πy ch·ªânh (c√†i header, method, body, v.v.).
- `Timeout` r·∫•t quan tr·ªçng ƒë·ªÉ tr√°nh client b·ªã treo m√£i n·∫øu server kh√¥ng ph·∫£n h·ªìi.
- N·∫øu d√πng `Transport` ho·∫∑c `Jar`, n√™n t√°i s·ª≠ d·ª•ng `client` thay v√¨ t·∫°o m·ªõi li√™n t·ª•c (hi·ªáu su·∫•t cao h∆°n).
- `CloseIdleConnections()` h·ªØu √≠ch khi mu·ªën ƒë√≥ng c√°c k·∫ø n·ªëi kh√¥ng c√≤n d√πng (v√≠ d·ª• khi ƒë·ªïi proxy ho·∫∑c transport m·ªõi).

## üöÄ C·∫•u h√¨nh `http.Client` n√¢ng cao trong Go

G√≥i `net/http` cho ph√©p b·∫°n t√πy ch·ªânh h√†nh vi c·ªßa client th√¥ng qua struct `http.Client`. D∆∞·ªõi ƒë√¢y l√† m√¥ t·∫£ chi ti·∫øt c√°c field v√† method h·ªØu √≠ch:

---

### üõ† C√°c Field ch√≠nh trong `http.Client`

#### 1. `Transport`

- Lo·∫°i: `http.RoundTripper`
- D√πng ƒë·ªÉ c·∫•u h√¨nh c√°ch g·ª≠i request (timeout, keep-alive, proxy, TLS, ...)
- M·∫∑c ƒë·ªãnh l√† `http.DefaultTransport`

```go
client := &http.Client{
    Transport: &http.Transport{
        MaxIdleConns: 10,
        IdleConnTimeout: 30 * time.Second,
    },
}
```

#### 2. `CheckRedirect`

- Lo·∫°i: `func(req *http.Request, via []*http.Request) error`
- T√πy ch·ªânh c√°ch x·ª≠ l√Ω redirect (v√≠ d·ª•: d·ª´ng redirect ho·∫∑c ghi log)

```go
client := &http.Client{
    CheckRedirect: func(req *http.Request, via []*http.Request) error {
        return http.ErrUseLastResponse // kh√¥ng cho ph√©p redirect
    },
}
```

#### 3. `Jar`

- Lo·∫°i: `http.CookieJar`
- Qu·∫£n l√Ω cookie (l∆∞u/truy xu·∫•t)

```go
jar, _ := cookiejar.New(nil)
client := &http.Client{
    Jar: jar,
}
```

#### 4. `Timeout`

- Lo·∫°i: `time.Duration`
- Th·ªùi gian t·ªëi ƒëa cho 1 request (bao g·ªìm k·∫øt n·ªëi + response)

```go
client := &http.Client{
    Timeout: 10 * time.Second,
}
```

---

### üîÑ C√°c Method ch√≠nh

#### `Do(request)`

- G·ª≠i request tu·ª≥ ch·ªânh

```go
req, _ := http.NewRequest("GET", "https://example.com", nil)
resp, err := client.Do(req)
```

#### `CloseIdleConnections()`

- ƒê√≥ng t·∫•t c·∫£ k·∫øt n·ªëi ƒëang ch·ªù (idle)

```go
client.CloseIdleConnections()
```

#### `Get`, `Head`, `Post`, `PostForm`

- G·ªçi c√°c method HTTP t∆∞∆°ng ·ª©ng
- S·ª≠ d·ª•ng `http.Client` t√πy ch·ªânh thay v√¨ `http.Get()` m·∫∑c ƒë·ªãnh

```go
resp, err := client.Get("https://example.com")
```

---

### üí° Ghi nh·ªõ

- D√πng `Timeout` ƒë·ªÉ tr√°nh treo ·ª©ng d·ª•ng khi server kh√¥ng ph·∫£n h·ªìi.
- D√πng `Jar` n·∫øu c·∫ßn l∆∞u cookie qua nhi·ªÅu request.
- D√πng `Transport` ƒë·ªÉ t√πy ch·ªânh proxy, TLS config, retry, keep-alive.
- Lu√¥n `defer resp.Body.Close()` sau khi x·ª≠ l√Ω xong response.

---

B·∫°n c√≥ th·ªÉ m·ªü r·ªông th√™m v·ªÅ proxy, TLS config ho·∫∑c custom RoundTripper n·∫øu c·∫ßn.
